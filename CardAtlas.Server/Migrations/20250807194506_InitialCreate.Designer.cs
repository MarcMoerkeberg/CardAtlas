// <auto-generated />
using System;
using CardAtlas.Server.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CardAtlas.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807194506_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ScryfallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanBeFoundInBoosters")
                        .HasColumnType("bit");

                    b.Property<string>("CollectorNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ColorIdentity")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<decimal?>("ConvertedManaCost")
                        .HasPrecision(8, 1)
                        .HasColumnType("decimal(8,1)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlavorText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FrameLayoutId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDigitalOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullArt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnReservedList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOversized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReprint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextless")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWotcOfficial")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Loyalty")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ManaCost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OracleText")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<long?>("ParentCardId")
                        .HasColumnType("bigint");

                    b.Property<string>("Power")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("RarityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ScryfallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<string>("Toughness")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TypeLine")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("FrameLayoutId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ParentCardId");

                    b.HasIndex("RarityId");

                    b.HasIndex("SetId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardArtist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CardId");

                    b.ToTable("CardArtists");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardGamePlatform", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<int>("GamePlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GamePlatformId");

                    b.ToTable("CardGamePlatforms");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardKeyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("KeywordId");

                    b.ToTable("CardKeywords");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardLegality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<int>("GameFormatId")
                        .HasColumnType("int");

                    b.Property<int>("LegalityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GameFormatId");

                    b.HasIndex("LegalityId");

                    b.ToTable("CardLegalities");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FoilPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PurchaseUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("VendorId");

                    b.ToTable("CardPrices");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardPrintFinish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<int>("PrintFinishId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PrintFinishId");

                    b.ToTable("CardPrintFinishes");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardPromoType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<int>("PromoTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PromoTypeId");

                    b.ToTable("CardPromoTypes");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Usd"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Eur"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tix"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.FrameLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("FrameLayouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Year1993"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Year1997"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Year2003"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Year2015"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Future"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.GameFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("GameFormats");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.GamePlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("GamePlatforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Paper"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arena"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mtgo"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.CardImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("ImageFormatId")
                        .HasColumnType("int");

                    b.Property<int>("ImageStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ImageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("ImageFormatId");

                    b.HasIndex("ImageStatusId");

                    b.HasIndex("ImageTypeId");

                    b.HasIndex("SourceId");

                    b.ToTable("CardImages");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.ImageFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ImageFormats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Png"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jpg"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.ImageStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ImageStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Placeholder"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LowResolution"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HighResolutionScan"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.ImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ImageTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Png"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BorderCrop"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ArtCrop"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Large"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Normal"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Small"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReminderText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PrintCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "en",
                            Name = "English",
                            PrintCode = "en"
                        },
                        new
                        {
                            Id = 2,
                            Code = "es",
                            Name = "Spanish",
                            PrintCode = "sp"
                        },
                        new
                        {
                            Id = 3,
                            Code = "fr",
                            Name = "French",
                            PrintCode = "fr"
                        },
                        new
                        {
                            Id = 4,
                            Code = "de",
                            Name = "German",
                            PrintCode = "de"
                        },
                        new
                        {
                            Id = 5,
                            Code = "it",
                            Name = "Italian",
                            PrintCode = "it"
                        },
                        new
                        {
                            Id = 6,
                            Code = "pt",
                            Name = "Portuguese",
                            PrintCode = "pt"
                        },
                        new
                        {
                            Id = 7,
                            Code = "ja",
                            Name = "Japanese",
                            PrintCode = "jp"
                        },
                        new
                        {
                            Id = 8,
                            Code = "ko",
                            Name = "Korean",
                            PrintCode = "kr"
                        },
                        new
                        {
                            Id = 9,
                            Code = "ru",
                            Name = "Russian",
                            PrintCode = "ru"
                        },
                        new
                        {
                            Id = 10,
                            Code = "zhs",
                            Name = "SimplifiedChinese",
                            PrintCode = "cs"
                        },
                        new
                        {
                            Id = 11,
                            Code = "zht",
                            Name = "TraditionalChinese",
                            PrintCode = "ct"
                        },
                        new
                        {
                            Id = 12,
                            Code = "he",
                            Name = "Hebrew"
                        },
                        new
                        {
                            Id = 13,
                            Code = "la",
                            Name = "Latin"
                        },
                        new
                        {
                            Id = 14,
                            Code = "grc",
                            Name = "AncientGreek"
                        },
                        new
                        {
                            Id = 15,
                            Code = "ar",
                            Name = "Arabic"
                        },
                        new
                        {
                            Id = 16,
                            Code = "sa",
                            Name = "Sanskrit"
                        },
                        new
                        {
                            Id = 17,
                            Code = "ph",
                            Name = "Phyrexian",
                            PrintCode = "ph"
                        },
                        new
                        {
                            Id = -1,
                            Code = "NA",
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Legality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Legalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Legal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NotLegal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Restricted"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Banned"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.PrintFinish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PrintFinishes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Foil"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NonFoil"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Etched"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.PromoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("PromoTypes");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Rarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Rarities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Common"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Uncommon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rare"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Special"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mythic"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bonus"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArenaCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Block")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BlockCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<bool>("IsDigitalOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFoilOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNonFoilOnly")
                        .HasColumnType("bit");

                    b.Property<string>("MtgoCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfCardsInSet")
                        .HasColumnType("int");

                    b.Property<string>("ParentSetCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("ScryfallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SetTypeId");

                    b.HasIndex("SourceId");

                    b.ToTable("Sets");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Code = "Default",
                            IsDigitalOnly = false,
                            IsFoilOnly = false,
                            IsNonFoilOnly = false,
                            Name = "Unknown - Default set",
                            NumberOfCardsInSet = 0,
                            SetTypeId = -1,
                            SourceId = -1
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.SetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SetTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Core"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expansion"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Masters"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Alchemy"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Masterpiece"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Arsenal"
                        },
                        new
                        {
                            Id = 7,
                            Name = "FromTheVault"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Spellbook"
                        },
                        new
                        {
                            Id = 9,
                            Name = "PremiumDeck"
                        },
                        new
                        {
                            Id = 10,
                            Name = "DuelDeck"
                        },
                        new
                        {
                            Id = 11,
                            Name = "DraftInnovation"
                        },
                        new
                        {
                            Id = 12,
                            Name = "TreasureChest"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Commander"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Planechase"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Archenemy"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Vanguard"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Funny"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Starter"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Box"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Promo"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Token"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Memorabilia"
                        },
                        new
                        {
                            Id = 23,
                            Name = "MiniGame"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Scryfall"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TcgPlayer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CardMarket"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CardHoarder"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mtgo"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Entities.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Entities.OutboxMessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessageTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "EmailConfirmation"
                        },
                        new
                        {
                            Id = -1,
                            Name = "NotImplemented"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "120a6a6d-9ba8-4291-8852-2c886425d0d1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "95007ffa-933b-44bd-8312-12322e26fcd4",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "1f3e819c-0f30-4b36-9533-64486b282b88",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a9eb88a6-590b-4863-8c47-eacc8e76fc91",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Artist", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Card", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.FrameLayout", "FrameLayout")
                        .WithMany("Cards")
                        .HasForeignKey("FrameLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Language", "Language")
                        .WithMany("Cards")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Card", "ParentCard")
                        .WithMany("ChildCards")
                        .HasForeignKey("ParentCardId");

                    b.HasOne("CardAtlas.Server.Models.Data.Rarity", "Rarity")
                        .WithMany("Cards")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Set", "Set")
                        .WithMany("Cards")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FrameLayout");

                    b.Navigation("Language");

                    b.Navigation("ParentCard");

                    b.Navigation("Rarity");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardArtist", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Artist", "Artist")
                        .WithMany("CardArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("CardArtists")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardGamePlatform", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("CardGamePlatforms")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.GamePlatform", "GamePlatform")
                        .WithMany("CardGamePlatforms")
                        .HasForeignKey("GamePlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GamePlatform");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardKeyword", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("CardKeywords")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Keyword", "Keyword")
                        .WithMany("CardKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardLegality", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("Legalities")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.GameFormat", "GameFormat")
                        .WithMany("CardLegalities")
                        .HasForeignKey("GameFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Legality", "Legality")
                        .WithMany("CardLegalities")
                        .HasForeignKey("LegalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GameFormat");

                    b.Navigation("Legality");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardPrice", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("Prices")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Currency", "Currency")
                        .WithMany("CardPrices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Vendor", "Vendor")
                        .WithMany("CardPrices")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Currency");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardPrintFinish", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("CardPrintFinishes")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.PrintFinish", "PrintFinish")
                        .WithMany("CardPrintFinishes")
                        .HasForeignKey("PrintFinishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("PrintFinish");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.CardRelations.CardPromoType", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("CardPromoTypes")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.PromoType", "PromoType")
                        .WithMany("PromoTypes")
                        .HasForeignKey("PromoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("PromoType");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.GameFormat", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.CardImage", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Card", "Card")
                        .WithMany("Images")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Image.ImageFormat", "ImageFormat")
                        .WithMany("ImageFormats")
                        .HasForeignKey("ImageFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Image.ImageStatus", "ImageStatus")
                        .WithMany("CardImages")
                        .HasForeignKey("ImageStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Image.ImageType", "ImageType")
                        .WithMany("CardImages")
                        .HasForeignKey("ImageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("ImageFormat");

                    b.Navigation("ImageStatus");

                    b.Navigation("ImageType");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Keyword", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.PromoType", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Set", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.SetType", "SetType")
                        .WithMany("Sets")
                        .HasForeignKey("SetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SetType");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Entities.OutboxMessage", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Entities.OutboxMessageType", "MessageType")
                        .WithMany("OutboxMessages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardAtlas.Server.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CardAtlas.Server.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Artist", b =>
                {
                    b.Navigation("CardArtists");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Card", b =>
                {
                    b.Navigation("CardArtists");

                    b.Navigation("CardGamePlatforms");

                    b.Navigation("CardKeywords");

                    b.Navigation("CardPrintFinishes");

                    b.Navigation("CardPromoTypes");

                    b.Navigation("ChildCards");

                    b.Navigation("Images");

                    b.Navigation("Legalities");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Currency", b =>
                {
                    b.Navigation("CardPrices");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.FrameLayout", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.GameFormat", b =>
                {
                    b.Navigation("CardLegalities");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.GamePlatform", b =>
                {
                    b.Navigation("CardGamePlatforms");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.ImageFormat", b =>
                {
                    b.Navigation("ImageFormats");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.ImageStatus", b =>
                {
                    b.Navigation("CardImages");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Image.ImageType", b =>
                {
                    b.Navigation("CardImages");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Keyword", b =>
                {
                    b.Navigation("CardKeywords");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Language", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Legality", b =>
                {
                    b.Navigation("CardLegalities");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.PrintFinish", b =>
                {
                    b.Navigation("CardPrintFinishes");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.PromoType", b =>
                {
                    b.Navigation("PromoTypes");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Rarity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Set", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.SetType", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Data.Vendor", b =>
                {
                    b.Navigation("CardPrices");
                });

            modelBuilder.Entity("CardAtlas.Server.Models.Entities.OutboxMessageType", b =>
                {
                    b.Navigation("OutboxMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
